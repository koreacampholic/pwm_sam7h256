ARM GAS  crt.s 			page 1


   1              	/* ************************************************************************************************
   2              	/*   											crt.s	                                                  */
   3              	/*                                                                                                 
   4              	/*                       Assembly Language Startup Code for Atmel AT91SAM7S256                     
   5              	/*                                                                                                 
   6              	/*                                                                                           			  *
   7              	/*                                                                                                 
   8              	/*                                                                                                 
   9              	/* Author:  James P Lynch      May 12, 2007 */
  10              	/* Modified by Jorge "Casainho" Pinto on March 2009.                                               
  11              	/* ************************************************************************************************
  12              	
  13              	/* Stack Sizes */
  14              	.set  UND_STACK_SIZE, 0x00000010		/* stack for "undefined instruction" interrupts is 16 bytes 	 */
  15              	.set  ABT_STACK_SIZE, 0x00000010		/* stack for "abort" interrupts is 16 bytes                 	 */
  16              	.set  FIQ_STACK_SIZE, 0x00000080		/* stack for "FIQ" interrupts  is 128 bytes     				 */
  17              	.set  IRQ_STACK_SIZE, 0X00000080		/* stack for "IRQ" normal interrupts is 128 bytes  				 */
  18              	.set  SVC_STACK_SIZE, 0x00000080		/* stack for "SVC" supervisor mode is 128 bytes  				 */
  19              	
  20              	/* Standard definitions of Mode bits and Interrupt (I & F) flags in PSRs (program status registers)
  21              	.set  ARM_MODE_USR, 0x10            	/* Normal User Mode 											 */
  22              	.set  ARM_MODE_FIQ, 0x11            	/* FIQ Processing Fast Interrupts Mode 							 */
  23              	.set  ARM_MODE_IRQ, 0x12            	/* IRQ Processing Standard Interrupts Mode 						 */
  24              	.set  ARM_MODE_SVC, 0x13            	/* Supervisor Processing Software Interrupts Mode 				 */
  25              	.set  ARM_MODE_ABT, 0x17            	/* Abort Processing memory Faults Mode 							 */
  26              	.set  ARM_MODE_UND, 0x1B            	/* Undefined Processing Undefined Instructions Mode 			 */
  27              	.set  ARM_MODE_SYS, 0x1F            	/* System Running Priviledged Operating System Tasks  Mode		 *
  28              	.set  I_BIT, 0x80               		/* when I bit is set, IRQ is disabled (program status registers) 
  29              	.set  F_BIT, 0x40               		/* when F bit is set, FIQ is disabled (program status registers) 
  30              	
  31              	/* Addresses and offsets of AIC and PIO  */
  32              	.set  AT91C_BASE_AIC, 0xFFFFF000 		/* (AIC) Base Address                         */
  33              	.set  AT91C_PIOA_CODR, 0xFFFFF434		/* (PIO) Clear Output Data Register           */
  34              	.set  AT91C_AIC_IVR, 0xFFFFF100			/* (AIC) IRQ Interrupt Vector Register        */
  35              	.set  AT91C_AIC_FVR, 0xFFFFF104			/* (AIC) FIQ Interrupt Vector Register        */
  36              	.set  AIC_IVR, 256						/* IRQ Vector Register offset from base above */
  37              	.set  AIC_FVR, 260						/* FIQ Vector Register offset from base above */
  38              	.set  AIC_EOICR, 304					/* End of Interrupt Command Register          */
  39              	
  40              	/* identify all GLOBAL symbols  */
  41              	.global _vec_reset
  42              	.global _vec_undef
  43              	.global _vec_swi
  44              	.global _vec_pabt
  45              	.global _vec_dabt
  46              	.global _vec_rsv
  47              	.global _vec_irq
  48              	.global _vec_fiq
  49              	.global AT91F_Irq_Handler
  50              	
  51              	/* GNU assembler controls  */
  52              	.text									/* all assembler code that follows will go into .text section	 */
  53              	.arm									/* compile for 32-bit ARM instruction set						 */
  54              	.align									/* align section on 32-bit boundary								 */
  55              	
  56              	/* ============================================================ */
  57              	/* 						VECTOR TABLE     					 	*/
ARM GAS  crt.s 			page 2


  58              	/*																*/
  59              	/*	Must be located in FLASH at address 0x00000000				*/
  60              	/*																*/
  61              	/*	Easy to do if this file crt.s is first in the list 			*/
  62              	/*	for the linker step in the makefile, e.g.					*/
  63              	/*																*/
  64              	/*	    $(LD) $(LFLAGS) -o main.out  crt.o main.o				*/
  65              	/*																*/
  66              	/* ============================================================ */
  67              	
  68 0000 060000EA 	_vec_reset:		b  _init_reset		/* RESET vector - must be at 0x00000000	*/
  69 0004 FEFFFFEA 	_vec_undef:		b  _vec_undef		/* Undefined Instruction vector			*/
  70 0008 FEFFFFEA 	_vec_swi:		b  _vec_swi				/* Software Interrupt vector		*/
  71 000c FEFFFFEA 	_vec_pabt:		b  _vec_pabt		/* Prefetch abort vector				*/
  72 0010 FEFFFFEA 	_vec_dabt:		b  _vec_dabt		/* Data abort vector					*/
  73 0014 FEFFFFEA 	_vec_rsv:		b _vec_rsv        /* Reserved vector						*/
  74 0018 FEFFFFEA 	_vec_irq:		b AT91F_Irq_Handler		/* Interrupt Request (IRQ) vector */
  75 001c FEFFFFEA 	_vec_fiq:		b _vec_fiq 	/* loop here */
  76              	
  77              	/* ======================================================================== */
  78              	/* 				  _init_reset Handler                                       */
  79              	/*																            */
  80              	/*	 RESET vector 0x00000000 branches to here.                              */
  81              	/*	                                                                        */
  82              	/*	 ARM microprocessor begins execution after RESET at address 0x00000000	*/
  83              	/*   in Supervisor mode with interrupts disabled!							*/
  84              	/*	                                                                        */
  85              	/*	 _init_reset handler:  creates a stack for each ARM mode.               */
  86              	/*	                       sets up a stack pointer for each ARM mode.       */
  87              	/*	                       turns off interrupts in each mode.               */
  88              	/*						   leaves CPU in SYS (System) mode.                 */
  89              	/*	                                                   			            */
  90              	/*	                       block copies the initializers to .data section   */
  91              	/*						   clears the .bss section to zero	                */
  92              	/*	                                             				            */
  93              	/*						   branches to main( ) 					            */
  94              	/* ======================================================================== */
  95              	.text			/* all assembler code that follows will go into .text section	 */
  96              	.align			/* align section on 32-bit boundary								 */
  97              	_init_reset:
  98              					/* Setup a stack for each mode with interrupts initially disabled. */
  99 0020 C0009FE5 	    			ldr   r0, =_stack_end						/* r0 = top-of-stack  */
 100              	
 101 0024 DBF021E3 	    			msr   CPSR_c, #ARM_MODE_UND|I_BIT|F_BIT 	/* switch to Undefined Instruction Mode  */
 102 0028 00D0A0E1 	    			mov   sp, r0								/* set stack pointer for UND mode  */
 103 002c 100040E2 	    			sub   r0, r0, #UND_STACK_SIZE				/* adjust r0 past UND stack  */
 104              	
 105 0030 D7F021E3 	    			msr   CPSR_c, #ARM_MODE_ABT|I_BIT|F_BIT 	/* switch to Abort Mode */
 106 0034 00D0A0E1 	    			mov   sp, r0								/* set stack pointer for ABT mode  */
 107 0038 100040E2 	    			sub   r0, r0, #ABT_STACK_SIZE				/* adjust r0 past ABT stack  */
 108              	
 109 003c D1F021E3 	    			msr   CPSR_c, #ARM_MODE_FIQ|I_BIT|F_BIT 	/* switch to FIQ Mode */
 110 0040 00D0A0E1 	    			mov   sp, r0								/* set stack pointer for FIQ mode  */
 111 0044 800040E2 	   				sub   r0, r0, #FIQ_STACK_SIZE				/* adjust r0 past FIQ stack  */
 112              	
 113 0048 D2F021E3 	    			msr   CPSR_c, #ARM_MODE_IRQ|I_BIT|F_BIT 	/* switch to IRQ Mode */
 114 004c 00D0A0E1 	    			mov   sp, r0								/* set stack pointer for IRQ mode  */
ARM GAS  crt.s 			page 3


 115 0050 800040E2 	    			sub   r0, r0, #IRQ_STACK_SIZE				/* adjust r0 past IRQ stack  */
 116              	
 117 0054 D3F021E3 	    			msr   CPSR_c, #ARM_MODE_SVC|I_BIT|F_BIT 	/* switch to Supervisor Mode */
 118 0058 00D0A0E1 	    			mov   sp, r0								/* set stack pointer for SVC mode  */
 119 005c 800040E2 	    			sub   r0, r0, #SVC_STACK_SIZE				/* adjust r0 past SVC stack  */
 120              	
 121 0060 DFF021E3 	    			msr   CPSR_c, #ARM_MODE_SYS|I_BIT|F_BIT 	/* switch to System Mode */
 122 0064 00D0A0E1 	    			mov   sp, r0								/* set stack pointer for SYS mode  */
 123              	    														/* we now start execution in SYSTEM mode */
 124              	    														/* This is exactly like USER mode (same stack) */
 125              	    														/* but SYSTEM mode has more privileges */
 126              	
 127              					/* copy initialized variables .data section  (Copy from ROM to RAM) */
 128 0068 7C109FE5 	                ldr     R1, =_etext
 129 006c 7C209FE5 	                ldr     R2, =_data
 130 0070 7C309FE5 	                ldr     R3, =_edata
 131 0074 030052E1 	1:        		cmp     R2, R3
 132 0078 04009134 	                ldrlo   R0, [R1], #4
 133 007c 04008234 	                strlo   R0, [R2], #4
 134 0080 FBFFFF3A 	                blo     1b
 135              	
 136              					/* Clear uninitialized variables .bss section (Zero init)  */
 137 0084 0000A0E3 	                mov     R0, #0
 138 0088 68109FE5 	                ldr     R1, =_bss_start
 139 008c 68209FE5 	                ldr     R2, =_bss_end
 140 0090 020051E1 	2:				cmp     R1, R2
 141 0094 04008134 	                strlo   R0, [R1], #4
 142 0098 FCFFFF3A 	                blo     2b
 143              	
 144              					/* Enter the C code  */
 145 009c FEFFFFEA 	                b       main
 146              	
 147              	/* ======================================================================== */
 148              	/* Function: 			AT91F_Irq_Handler	       			 				*/
 149              	/*																			*/
 150              	/* This IRQ_Handler supports nested interrupts (an IRQ interrupt can itself	*/
 151              	/* be interrupted).															*/
 152              	/*	                                               							*/
 153              	/* This handler re-enables interrupts and switches to "Supervisor" mode to  */
 154              	/* prevent any corruption to the link and IP registers.						*/
 155              	/*	                                               							*/
 156              	/* The Interrupt Vector Register (AIC_IVR) is read to determine the address */
 157              	/* of the required interrupt service routine. The ISR routine can be a 		*/
 158              	/* standard C function since this handler minds all the save/restore 		*/
 159              	/* protocols.																*/
 160              	/*																			*/
 161              	/*																			*/
 162              	/* Programmers:																*/
 163              	/*--------------------------------------------------------------------------*/
 164              	/*         ATMEL Microcontroller Software Support  -  ROUSSET  -            */
 165              	/*--------------------------------------------------------------------------*/
 166              	/* DISCLAIMER:  THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS  */
 167              	/* OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED        */
 168              	/* WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND      */
 169              	/* NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR   */
 170              	/* ANY DIRECT, INDIRECT,    INCIDENTAL, SPECIAL, EXEMPLARY, OR              */
 171              	/* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT    LIMITED TO, PROCUREMENT     */
ARM GAS  crt.s 			page 4


 172              	/* OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,    OR PROFITS; OR    */
 173              	/* BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF    LIABILITY, */
 174              	/* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING    NEGLIGENCE  */
 175              	/* OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,        */
 176              	/* EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                       */
 177              	/* File source          : Cstartup.s79                                      */
 178              	/* Object               : Generic CStartup to AT91SAM7S256                  */
 179              	/* 1.0 09/May/06 JPP    : Creation                                          */
 180              	/*                                                                          */
 181              	/*																			*/
 182              	/* Note: taken from Atmel web site (www.at91.com)                           */
 183              	/*		 Keil example project:  AT91SAM7S-Interrupt_SAM7S                   */
 184              	/* ======================================================================== */
 185              	AT91F_Irq_Handler:
 186              	
 187              	/* Manage Exception Entry  				*/
 188              	/* Adjust and save LR_irq in IRQ stack  */
 189 00a0 04E04EE2 					sub			lr, lr, #4
 190 00a4 00402DE9 					stmfd		sp!, {lr}
 191              	
 192              	/* Save r0 and SPSR (need to be saved for nested interrupt)  */
 193 00a8 00E04FE1 					mrs			r14, SPSR
 194 00ac 01402DE9 					stmfd		sp!, {r0,r14}
 195              	
 196              	/* Write in the IVR to support Protect Mode  				*/
 197              	/* No effect in Normal Mode  								*/
 198              	/* De-assert the NIRQ and clear the source in Protect Mode  */
 199 00b0 48E09FE5 					ldr			r14, =AT91C_BASE_AIC
 200 00b4 00019EE5 					ldr			r0 , [r14, #AIC_IVR]
 201 00b8 00E18EE5 					str			r14, [r14, #AIC_IVR]
 202              	
 203              	/* Enable Interrupt and Switch in Supervisor Mode  */
 204 00bc 13F021E3 					msr			CPSR_c, #ARM_MODE_SVC
 205              	
 206              	/* Save scratch/used registers and LR in User Stack  */
 207 00c0 0E502DE9 					stmfd		sp!, { r1-r3, r12, r14}
 208              	
 209              	/* Branch to the routine pointed by the AIC_IVR  */
 210 00c4 0FE0A0E1 					mov			r14, pc
 211 00c8 10FF2FE1 					bx			r0
 212              	
 213              	/* Manage Exception Exit  								  */
 214              	/* Restore scratch/used registers and LR from User Stack  */
 215 00cc 0E50BDE8 					ldmia		sp!, { r1-r3, r12, r14}
 216              	
 217              	/* Disable Interrupt and switch back in IRQ mode  */
 218 00d0 92F021E3 					msr			CPSR_c, #I_BIT | ARM_MODE_IRQ
 219              	
 220              	/* Mark the End of Interrupt on the AIC  */
 221 00d4 24E09FE5 					ldr			r14, =AT91C_BASE_AIC
 222 00d8 30E18EE5 					str			r14, [r14, #AIC_EOICR]
 223              	
 224              	/* Restore SPSR_irq and r0 from IRQ stack  */
 225 00dc 0140BDE8 					ldmia		sp!, {r0,r14}
 226 00e0 0EF06FE1 					msr			SPSR_cxsf, r14
 227              	
 228              	/* Restore adjusted  LR_irq from IRQ stack directly in the PC  */
ARM GAS  crt.s 			page 5


 229 00e4 0080FDE8 					ldmia		sp!, {pc}^
 230 00e8 00000000 	.end
 230      00000000 
 230      00000000 
 230      00000000 
 230      00000000 
ARM GAS  crt.s 			page 6


DEFINED SYMBOLS
               crt.s:14     *ABS*:0000000000000010 UND_STACK_SIZE
               crt.s:15     *ABS*:0000000000000010 ABT_STACK_SIZE
               crt.s:16     *ABS*:0000000000000080 FIQ_STACK_SIZE
               crt.s:17     *ABS*:0000000000000080 IRQ_STACK_SIZE
               crt.s:18     *ABS*:0000000000000080 SVC_STACK_SIZE
               crt.s:21     *ABS*:0000000000000010 ARM_MODE_USR
               crt.s:22     *ABS*:0000000000000011 ARM_MODE_FIQ
               crt.s:23     *ABS*:0000000000000012 ARM_MODE_IRQ
               crt.s:24     *ABS*:0000000000000013 ARM_MODE_SVC
               crt.s:25     *ABS*:0000000000000017 ARM_MODE_ABT
               crt.s:26     *ABS*:000000000000001b ARM_MODE_UND
               crt.s:27     *ABS*:000000000000001f ARM_MODE_SYS
               crt.s:28     *ABS*:0000000000000080 I_BIT
               crt.s:29     *ABS*:0000000000000040 F_BIT
               crt.s:32     *ABS*:00000000fffff000 AT91C_BASE_AIC
               crt.s:33     *ABS*:00000000fffff434 AT91C_PIOA_CODR
               crt.s:34     *ABS*:00000000fffff100 AT91C_AIC_IVR
               crt.s:35     *ABS*:00000000fffff104 AT91C_AIC_FVR
               crt.s:36     *ABS*:0000000000000100 AIC_IVR
               crt.s:37     *ABS*:0000000000000104 AIC_FVR
               crt.s:38     *ABS*:0000000000000130 AIC_EOICR
               crt.s:68     .text:0000000000000000 _vec_reset
               crt.s:69     .text:0000000000000004 _vec_undef
               crt.s:70     .text:0000000000000008 _vec_swi
               crt.s:71     .text:000000000000000c _vec_pabt
               crt.s:72     .text:0000000000000010 _vec_dabt
               crt.s:73     .text:0000000000000014 _vec_rsv
               crt.s:74     .text:0000000000000018 _vec_irq
               crt.s:75     .text:000000000000001c _vec_fiq
               crt.s:185    .text:00000000000000a0 AT91F_Irq_Handler
               crt.s:54     .text:0000000000000000 $a
               crt.s:97     .text:0000000000000020 _init_reset
               crt.s:230    .text:00000000000000e8 $d

UNDEFINED SYMBOLS
_stack_end
_etext
_data
_edata
_bss_start
_bss_end
main
